// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using dotnetcore.Data;

namespace dotnetcore.Migrations
{
    [DbContext(typeof(Context))]
    partial class ContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.1.1-rtm-30846")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("dotnetcore.Data.Address", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("City")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<string>("Street")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.HasKey("ID");

                    b.ToTable("Address");
                });

            modelBuilder.Entity("dotnetcore.Data.Announcement", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Details")
                        .IsRequired()
                        .HasMaxLength(255);

                    b.Property<DateTime>("EndTime");

                    b.Property<byte[]>("Image")
                        .IsRequired();

                    b.Property<bool>("ShowAsPushNotification");

                    b.Property<DateTime>("StartTime");

                    b.Property<string>("Summary")
                        .HasMaxLength(255);

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.HasKey("ID");

                    b.ToTable("Announcement");
                });

            modelBuilder.Entity("dotnetcore.Data.Award", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<byte[]>("Logo")
                        .IsRequired();

                    b.Property<int>("Number");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.HasKey("ID");

                    b.ToTable("Award");
                });

            modelBuilder.Entity("dotnetcore.Data.AwardCriteria", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<byte[]>("Logo")
                        .IsRequired();

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<double>("Weight");

                    b.HasKey("ID");

                    b.ToTable("AwardCriteria");
                });

            modelBuilder.Entity("dotnetcore.Data.AwardQuote", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ContactName")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(255);

                    b.Property<byte[]>("Image")
                        .IsRequired();

                    b.Property<string>("JobTitle")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.HasKey("ID");

                    b.ToTable("AwardQuote");
                });

            modelBuilder.Entity("dotnetcore.Data.ContactUs", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<string>("WorkHours")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.HasKey("ID");

                    b.ToTable("ContactUs");
                });

            modelBuilder.Entity("dotnetcore.Data.Country", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CountryCode")
                        .IsRequired()
                        .HasMaxLength(20);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.HasKey("ID");

                    b.ToTable("Country");
                });

            modelBuilder.Entity("dotnetcore.Data.Criteria", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("OnlineParticipationRequestID");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.HasKey("ID");

                    b.HasIndex("OnlineParticipationRequestID");

                    b.ToTable("Criteria");
                });

            modelBuilder.Entity("dotnetcore.Data.Event", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("AllDayEvent");

                    b.Property<string>("Category")
                        .HasMaxLength(50);

                    b.Property<int>("ContactNumber");

                    b.Property<string>("Details")
                        .HasMaxLength(255);

                    b.Property<string>("Email")
                        .HasMaxLength(50);

                    b.Property<DateTime>("EndTime");

                    b.Property<byte[]>("Image");

                    b.Property<int>("LocationID");

                    b.Property<string>("OrganisedBy")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<DateTime>("StartTime");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<string>("URL")
                        .HasMaxLength(255);

                    b.HasKey("ID");

                    b.HasIndex("LocationID");

                    b.ToTable("Event");
                });

            modelBuilder.Entity("dotnetcore.Data.FeedbackReceiver", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<bool>("IsActive");

                    b.HasKey("ID");

                    b.ToTable("FeedbackReceiver");
                });

            modelBuilder.Entity("dotnetcore.Data.FeedbackRequest", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CountryID");

                    b.Property<string>("Details")
                        .HasMaxLength(255);

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<string>("MobileNumber")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<int>("Status");

                    b.Property<string>("Subject")
                        .HasMaxLength(50);

                    b.Property<string>("Submitter")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.HasKey("ID");

                    b.HasIndex("CountryID");

                    b.ToTable("FeedbackRequest");
                });

            modelBuilder.Entity("dotnetcore.Data.Homebanner", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("EndTime");

                    b.Property<byte[]>("Image")
                        .IsRequired();

                    b.Property<DateTime>("StartTime");

                    b.Property<string>("Title")
                        .HasMaxLength(50);

                    b.Property<string>("URL")
                        .HasMaxLength(255);

                    b.HasKey("ID");

                    b.ToTable("Homebanner");
                });

            modelBuilder.Entity("dotnetcore.Data.Location", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("City")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<int>("ContactUsID");

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<double>("Latitude");

                    b.Property<double>("Longitude");

                    b.HasKey("ID");

                    b.HasIndex("ContactUsID");

                    b.ToTable("Location");
                });

            modelBuilder.Entity("dotnetcore.Data.Nationality", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.HasKey("ID");

                    b.ToTable("Nationality");
                });

            modelBuilder.Entity("dotnetcore.Data.News", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Details")
                        .IsRequired()
                        .HasMaxLength(255);

                    b.Property<DateTime>("EndTime");

                    b.Property<byte[]>("Image");

                    b.Property<DateTime>("StartTime");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.HasKey("ID");

                    b.ToTable("News");
                });

            modelBuilder.Entity("dotnetcore.Data.OnlineParticipationRequest", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CountryID");

                    b.Property<string>("Title")
                        .HasMaxLength(50);

                    b.Property<string>("TrackingCode")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<int>("UserID");

                    b.HasKey("ID");

                    b.HasIndex("CountryID");

                    b.HasIndex("UserID");

                    b.ToTable("OnlineParticipationRequest");
                });

            modelBuilder.Entity("dotnetcore.Data.PeopleGroup", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.HasKey("ID");

                    b.ToTable("PeopleGroup");
                });

            modelBuilder.Entity("dotnetcore.Data.PeopleGroupAnnouncement", b =>
                {
                    b.Property<int>("PeopleGroupID");

                    b.Property<int>("AnnouncementID");

                    b.HasKey("PeopleGroupID", "AnnouncementID");

                    b.HasIndex("AnnouncementID");

                    b.ToTable("PeopleGroup-Announcement");
                });

            modelBuilder.Entity("dotnetcore.Data.PeopleGroupEvent", b =>
                {
                    b.Property<int>("PeopleGroupID");

                    b.Property<int>("EventID");

                    b.HasKey("PeopleGroupID", "EventID");

                    b.HasIndex("EventID");

                    b.ToTable("PeopleGroup-Event");
                });

            modelBuilder.Entity("dotnetcore.Data.Photo", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(255);

                    b.Property<byte[]>("Image")
                        .IsRequired();

                    b.Property<DateTime>("PostingDate");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.HasKey("ID");

                    b.ToTable("Photo");
                });

            modelBuilder.Entity("dotnetcore.Data.PhotoAlbum", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<byte[]>("CoverImage")
                        .IsRequired();

                    b.Property<string>("Details")
                        .IsRequired()
                        .HasMaxLength(255);

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.HasKey("ID");

                    b.ToTable("PhotoAlbum");
                });

            modelBuilder.Entity("dotnetcore.Data.PhotoAlbumPhoto", b =>
                {
                    b.Property<int>("PhotoAlbumID");

                    b.Property<int>("PhotoID");

                    b.HasKey("PhotoAlbumID", "PhotoID");

                    b.HasIndex("PhotoID");

                    b.ToTable("PhotoAlbum-Photo");
                });

            modelBuilder.Entity("dotnetcore.Data.SocialMediaAccount", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ContactUsID");

                    b.Property<string>("Title");

                    b.Property<string>("URL")
                        .IsRequired()
                        .HasMaxLength(255);

                    b.HasKey("ID");

                    b.HasIndex("ContactUsID");

                    b.ToTable("SocialMediaAccount");
                });

            modelBuilder.Entity("dotnetcore.Data.SubCriteria", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Comments")
                        .HasMaxLength(255);

                    b.Property<int>("CriteriaID");

                    b.Property<byte[]>("Document");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.HasKey("ID");

                    b.HasIndex("CriteriaID");

                    b.ToTable("SubCriteria");
                });

            modelBuilder.Entity("dotnetcore.Data.User", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<string>("Gender")
                        .IsRequired()
                        .HasMaxLength(1);

                    b.Property<int>("NationalityID");

                    b.Property<string>("PassportNumber")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnName("Password Hash")
                        .HasMaxLength(1000);

                    b.Property<int>("PeopleGroupID");

                    b.Property<byte[]>("Salt")
                        .IsRequired();

                    b.Property<string>("SchoolName")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<string>("TeachingArea")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.HasKey("ID");

                    b.HasIndex("NationalityID");

                    b.HasIndex("PeopleGroupID");

                    b.ToTable("User");
                });

            modelBuilder.Entity("dotnetcore.Data.UserToken", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Email");

                    b.Property<DateTime>("Expiry");

                    b.Property<string>("Token");

                    b.Property<bool>("TokenIsUsed");

                    b.Property<int>("UserID");

                    b.HasKey("ID");

                    b.HasIndex("UserID");

                    b.ToTable("UserToken");
                });

            modelBuilder.Entity("dotnetcore.Data.Video", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(255);

                    b.Property<DateTime>("PostingDate");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<string>("URL")
                        .IsRequired()
                        .HasMaxLength(255);

                    b.HasKey("ID");

                    b.ToTable("Video");
                });

            modelBuilder.Entity("dotnetcore.Data.VideoAlbum", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<byte[]>("CoverImage")
                        .IsRequired();

                    b.Property<string>("Details")
                        .IsRequired()
                        .HasMaxLength(255);

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.HasKey("ID");

                    b.ToTable("VideoAlbum");
                });

            modelBuilder.Entity("dotnetcore.Data.VideoAlbumVideo", b =>
                {
                    b.Property<int>("VideoAlbumID");

                    b.Property<int>("VideoID");

                    b.HasKey("VideoAlbumID", "VideoID");

                    b.HasIndex("VideoID");

                    b.ToTable("VideoAlbum-Video");
                });

            modelBuilder.Entity("dotnetcore.Data.Criteria", b =>
                {
                    b.HasOne("dotnetcore.Data.OnlineParticipationRequest", "OnlineParticipationRequest")
                        .WithMany("Criterias")
                        .HasForeignKey("OnlineParticipationRequestID");
                });

            modelBuilder.Entity("dotnetcore.Data.Event", b =>
                {
                    b.HasOne("dotnetcore.Data.Location", "Location")
                        .WithMany("Events")
                        .HasForeignKey("LocationID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("dotnetcore.Data.FeedbackRequest", b =>
                {
                    b.HasOne("dotnetcore.Data.Country", "Country")
                        .WithMany("FeedbackRequests")
                        .HasForeignKey("CountryID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("dotnetcore.Data.Location", b =>
                {
                    b.HasOne("dotnetcore.Data.ContactUs", "ContactUs")
                        .WithMany("Locations")
                        .HasForeignKey("ContactUsID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("dotnetcore.Data.OnlineParticipationRequest", b =>
                {
                    b.HasOne("dotnetcore.Data.Country", "Country")
                        .WithMany("OnlineParticipationRequests")
                        .HasForeignKey("CountryID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("dotnetcore.Data.User", "User")
                        .WithMany("OnlineParticipationRequests")
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("dotnetcore.Data.PeopleGroupAnnouncement", b =>
                {
                    b.HasOne("dotnetcore.Data.Announcement", "Announcement")
                        .WithMany("PeopleGroups")
                        .HasForeignKey("AnnouncementID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("dotnetcore.Data.PeopleGroup", "PeopleGroup")
                        .WithMany("Announcements")
                        .HasForeignKey("PeopleGroupID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("dotnetcore.Data.PeopleGroupEvent", b =>
                {
                    b.HasOne("dotnetcore.Data.Event", "Event")
                        .WithMany("PeopleGroups")
                        .HasForeignKey("EventID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("dotnetcore.Data.PeopleGroup", "PeopleGroup")
                        .WithMany("Events")
                        .HasForeignKey("PeopleGroupID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("dotnetcore.Data.PhotoAlbumPhoto", b =>
                {
                    b.HasOne("dotnetcore.Data.PhotoAlbum", "PhotoAlbum")
                        .WithMany("Photos")
                        .HasForeignKey("PhotoAlbumID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("dotnetcore.Data.Photo", "Photo")
                        .WithMany("PhotoAlbums")
                        .HasForeignKey("PhotoID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("dotnetcore.Data.SocialMediaAccount", b =>
                {
                    b.HasOne("dotnetcore.Data.ContactUs", "ContactUs")
                        .WithMany("SocialMediaAccounts")
                        .HasForeignKey("ContactUsID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("dotnetcore.Data.SubCriteria", b =>
                {
                    b.HasOne("dotnetcore.Data.Criteria", "Criteria")
                        .WithMany("SubCriterias")
                        .HasForeignKey("CriteriaID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("dotnetcore.Data.User", b =>
                {
                    b.HasOne("dotnetcore.Data.Nationality", "Nationality")
                        .WithMany("Users")
                        .HasForeignKey("NationalityID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("dotnetcore.Data.PeopleGroup", "PeopleGroup")
                        .WithMany()
                        .HasForeignKey("PeopleGroupID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("dotnetcore.Data.UserToken", b =>
                {
                    b.HasOne("dotnetcore.Data.User", "User")
                        .WithMany("UserTokens")
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("dotnetcore.Data.VideoAlbumVideo", b =>
                {
                    b.HasOne("dotnetcore.Data.VideoAlbum", "VideoAlbum")
                        .WithMany("Videos")
                        .HasForeignKey("VideoAlbumID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("dotnetcore.Data.Video", "Video")
                        .WithMany("VideoAlbums")
                        .HasForeignKey("VideoID")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
